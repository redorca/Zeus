/****************************************************************************
 * configs/nrf52832_dk/scripts/ld.script
 *
 *   Copyright (C) 2016 Gregory Nutt. All rights reserved.
 *   Author: Gregory Nutt <gnutt@nuttx.org>
 *           Sebastien Lorquet <sebastien@lorquet.fr>
 *           dev@ziggurat29.com
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 * 3. Neither the name NuttX nor the names of its contributors may be
 *    used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
 * OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
 * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 ****************************************************************************/
/*****************************************************************************
 *                                                                           *
 * Copyright (C) 2017 zGlue Inc, All rights reserved.                        *
 *                                                                           *
 ****************************************************************************/

/*****************************************************************************
 * For the Nordic nrf52832 arm M4F.                                          *
 *                                                                           *
 *                                                                           *
 ****************************************************************************/
MEMORY
{
  flash (rx) :  ORIGIN = NRF_FLASH_START, LENGTH = NRF_FLASH_LENGTH
  sram (rwx) :  ORIGIN = NRF_SRAM_START, LENGTH = NRF_SRAM_LENGTH
    /** Location of non initialized RAM. Non initialized RAM is used for exchanging bond information
   *  from application to bootloader when using buttonluss DFU OTA.
   */
  NOINIT (rwx) :  ORIGIN = 0x20007F80, LENGTH = 0x80

/* BOOTLOADER setting start */
  /** Location of bootloader setting in flash. */
  BOOTLOADER_SETTINGS (rw) : ORIGIN = 0x0007F000, LENGTH = 0x1000

  /** Location in UICR where bootloader start address is stored. */
  UICR_BOOTLOADER (r) : ORIGIN = 0x10001014, LENGTH = 0x04

  /** Location of mbr params page in flash. */
  MBR_PARAMS_PAGE (rw) : ORIGIN = 0x0007E000, LENGTH = 0x1000

  /** Location in UICR where mbr params page address is stored. */
  UICR_MBR_PARAM_PAGE(r) : ORIGIN = 0x10001018, LENGTH = 0x04
/* BOOTLOADER setting end */
}

OUTPUT_ARCH(arm)
ENTRY(_stext)
SECTIONS
{
	.text : {
		_stext = ABSOLUTE(.);
		*(.vectors)
		*(.text .text.*)
		*(.fixup)
		*(.gnu.warning)
		*(.rodata .rodata.*)
		*(.gnu.linkonce.t.*)
		*(.glue_7)
		*(.glue_7t)
		*(.got)
		*(.gcc_except_table)
		*(.gnu.linkonce.r.*)
		_etext = ABSOLUTE(.);
	} > flash

	.init_section : {
		_sinit = ABSOLUTE(.);
		*(.init_array .init_array.*)
		_einit = ABSOLUTE(.);
	} > flash

	.ARM.extab : {
		*(.ARM.extab*)
	} > flash

	__exidx_start = ABSOLUTE(.);
	.ARM.exidx : {
		*(.ARM.exidx*)
	} > flash
	__exidx_end = ABSOLUTE(.);

	_eronly = ABSOLUTE(.);

	/* BOOTLOADER setting start */
    /* Place the bootloader settings page in flash. */
    .bootloaderSettings(NOLOAD) :
    {

    } > BOOTLOADER_SETTINGS

    /* Write the bootloader address in UICR. */
    .uicrBootStartAddress :
    {
      KEEP(*(.uicrBootStartAddress))
    } > UICR_BOOTLOADER

    /* Place the mbr params page in flash. */
      .mbrParamsPage(NOLOAD) :
    {

    } > MBR_PARAMS_PAGE

    /* Write the bootloader address in UICR. */
    .uicrMbrParamsPageAddress :
    {
      KEEP(*(.uicrMbrParamsPageAddress))
    } > UICR_MBR_PARAM_PAGE

    /* No init RAM section in bootloader. Used for bond information exchange. */
    .noinit(NOLOAD) :
    {

    } > NOINIT
    /* other placements follow here... */
    /* BOOTLOADER setting end */

	.data : {
        __data_start__ = .;
		_sdata = ABSOLUTE(.);
		*(.data .data.*)
		*(.gnu.linkonce.d.*)
		CONSTRUCTORS
		_edata = ABSOLUTE(.);
		__data_end__ = .;
	} > sram AT > flash


	.fs_data :
	{
	    _sfsdata = ABSOLUTE(.);
	    . = ALIGN(4);
	    PROVIDE(__start_fs_data = .);
	    KEEP(*(.fs_data))
	    PROVIDE(__stop_fs_data = .);
	    . = ALIGN(4);
       _efsdata = ABSOLUTE(.);
	} > sram AT > flash


    .svc_data :
    {
      PROVIDE(__start_svc_data = .);
      KEEP(*(.svc_data))
      PROVIDE(__stop_svc_data = .);
    } > sram

    .dfu_trans :
    {
      PROVIDE(__start_dfu_trans = .);
      KEEP(*(.dfu_trans))
      PROVIDE(__stop_dfu_trans = .);
    }  > sram



	.bss : {
		_sbss = ABSOLUTE(.);
		*(.bss .bss.*)
		*(.gnu.linkonce.b.*)
		*(COMMON)
		_ebss = ABSOLUTE(.);
	} > sram

	/* Stabs debugging sections. */
	.stab 0 : { *(.stab) }
	.stabstr 0 : { *(.stabstr) }
	.stab.excl 0 : { *(.stab.excl) }
	.stab.exclstr 0 : { *(.stab.exclstr) }
	.stab.index 0 : { *(.stab.index) }
	.stab.indexstr 0 : { *(.stab.indexstr) }
	.comment 0 : { *(.comment) }
	.debug_abbrev 0 : { *(.debug_abbrev) }
	.debug_info 0 : { *(.debug_info) }
	.debug_line 0 : { *(.debug_line) }
	.debug_pubnames 0 : { *(.debug_pubnames) }
	.debug_aranges 0 : { *(.debug_aranges) }
}
