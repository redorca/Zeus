############################################################################
# arch/arm/src/nrf52/Make.defs
#
#   Copyright (C) 2018 Gregory Nutt. All rights reserved.
#   Author:  Janne Rosberg <janne@offcode.fi>
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in
#    the documentation and/or other materials provided with the
#    distribution.
# 3. Neither the name NuttX nor the names of its contributors may be
#    used to endorse or promote products derived from this software
#    without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
# COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
# OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
# AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
# ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
############################################################################

include $(TOPDIR)/arch/arm/src/chip/Make.vars

# The start-up, "head", file.  Only common vectors are support so there
# isn't one.

HEAD_ASRC =

# Common ARM and Cortex-M4 files (copied from stm32/Make.defs)
CMN_UASRCS =
CMN_UCSRCS =

CMN_ASRCS  = up_saveusercontext.S up_fullcontextrestore.S up_switchcontext.S
CMN_ASRCS += up_testset.S vfork.S

CMN_CSRCS  = up_assert.c up_blocktask.c up_copyfullstate.c
CMN_CSRCS += up_createstack.c up_mdelay.c up_udelay.c up_exit.c
CMN_CSRCS += up_initialize.c up_initialstate.c up_interruptcontext.c
CMN_CSRCS += up_memfault.c up_modifyreg8.c up_modifyreg16.c up_modifyreg32.c
CMN_CSRCS += up_releasepending.c up_releasestack.c up_reprioritizertr.c
CMN_CSRCS += up_schedulesigaction.c up_sigdeliver.c up_stackframe.c
CMN_CSRCS += up_unblocktask.c up_usestack.c up_doirq.c up_hardfault.c
CMN_CSRCS += up_svcall.c up_vfork.c

CMN_CSRCS += up_systemreset.c

# Configuration-dependent common files

ifeq ($(CONFIG_ARMV7M_STACKCHECK),y)
CMN_CSRCS += up_stackcheck.c
endif

ifeq ($(CONFIG_ARMV7M_LAZYFPU),y)
CMN_ASRCS += up_lazyexception.S
else
CMN_ASRCS += up_exception.S
endif
CMN_CSRCS += up_vectors.c

ifeq ($(CONFIG_ARCH_RAMVECTORS),y)
CMN_CSRCS += up_ramvec_initialize.c up_ramvec_attach.c
endif

ifeq ($(CONFIG_BUILD_PROTECTED),y)
CMN_CSRCS += up_mpu.c up_task_start.c up_pthread_start.c
ifneq ($(CONFIG_DISABLE_SIGNALS),y)
CMN_CSRCS += up_signal_dispatch.c
CMN_UASRCS += up_signal_handler.S
endif
endif

ifeq ($(CONFIG_STACK_COLORATION),y)
CMN_CSRCS += up_checkstack.c
endif

ifeq ($(CONFIG_ARCH_FPU),y)
CMN_ASRCS += up_fpu.S
ifneq ($(CONFIG_ARMV7M_CMNVECTOR),y)
CMN_CSRCS += up_copyarmstate.c
else ifeq ($(CONFIG_ARMV7M_LAZYFPU),y)
CMN_CSRCS += up_copyarmstate.c
endif
endif

# Required NRF52 files

CHIP_ASRCS  =
CHIP_CSRCS  =  nrf52_gpio.c nrf52_start.c nrf52_idle.c nrf52_irq.c
CHIP_CSRCS  += nrf52_allocateheap.c

ifeq ($(CONFIG_SEGGER_RTT_CONSOLE),y)
CHIP_CSRCS += up_segger_rtt_console.c
else ifeq ($(CONFIG_ARCH_LOWPUTC),y)
CHIP_CSRCS += nrf52_lowputc.c
endif

CHIP_CSRCS += nrf52_serial.c

ifeq ($(CONFIG_ARCH_CHIP_NRF52832),y)
CHIP_CSRCS  += system_nrf52.c
endif

ifeq ($(CONFIG_ARCH_CHIP_NRF52840),y)
CHIP_CSRCS  += system_nrf52840.c

ifeq ($(CONFIG_NRF52_QSPI),y)
CHIP_CSRCS += nrf52_qspi.c
endif

endif

CHIP_CSRCS  += nrf52_clock.c
CHIP_CSRCS  += nrf_nvmc.c

ifeq ($(CONFIG_NRF52_PROGMEM),y)
CHIP_CSRCS  += nrf52_flash.c
CHIP_CSRCS  += nrf52_waste.c
endif

ifeq ($(CONFIG_NRF52_BLUETOOTH),y)

VPATH  += $(SD_HANDLER)
CHIP_CSRCS  += softdevice_handler.c
#CHIP_CSRCS  += softdevice_handler_appsh.c

endif

ifeq ($(CONFIG_I2C),y)
CHIP_CSRCS += nrf52_i2c.c
endif

ifeq ($(CONFIG_I2C_SLAVE),y)
CHIP_CSRCS += nrf52_i2c_slave.c
endif

ifeq ($(CONFIG_NRF52_JTAG),y)
CHIP_CSRCS += nrf52_jtag.c
endif

ifeq ($(CONFIG_NRF52_SPI),y)
#CHIP_CSRCS += nrf52_spi_legacy.c
CHIP_CSRCS += nrf52_spi.c
endif

ifeq ($(CONFIG_TIMER),y)
CHIP_CSRCS += nrf52_tim.c nrf52_tim_lowerhalf.c
endif

ifeq ($(CONFIG_NRF52_GPIOTE),y)
CHIP_CSRCS += nrf52_gpiote.c
endif

ifeq ($(CONFIG_NRF52_PPI),y)
CHIP_CSRCS += nrf52_ppi.c
endif

# tickless will select nrf52_tickless.c
# RTC_TICK will not select nrf52_timerisr.c
ifeq ($(CONFIG_SCHED_TICKLESS),y)
CHIP_CSRCS += nrf52_tickless.c
else ifneq ($(CONFIG_RTC_TICK),y)
CHIP_CSRCS += nrf52_timerisr.c
endif

ifeq ($(CONFIG_NRF52_ONESHOT),y)
CHIP_CSRCS += nrf52_oneshot.c nrf52_oneshot_lowerhalf.c
endif


ifeq ($(CONFIG_BUILD_PROTECTED),y)
CHIP_CSRCS += nrf52_userspace.c nrf52_mpuinit.c
endif

ifeq ($(CONFIG_PM),y)
CHIP_CSRCS += nrf52_pminitialize.c
endif

ifeq ($(CONFIG_COUNTER),y)
CHIP_CSRCS += nrf52_rtc_lowerhalf.c
endif
ifeq ($(CONFIG_RTC),y)
CHIP_CSRCS += nrf52_rtcounter.c
CHIP_CSRCS += nrf52_rtc.c
endif


ifeq ($(CONFIG_NRF52_RNG),y)
CHIP_CSRCS += nrf_queue.c nrf52_rng.c
endif

ifeq ($(CONFIG_QDECODER),y)
CHIP_CSRCS += nrf52_qdecoder.c
endif

ifeq ($(CONFIG_NRF52_ADC),y)
CHIP_CSRCS += nrf52_adc.c
endif

ifeq ($(CONFIG_NRF52_COMP),y)
CHIP_CSRCS += nrf52_comp.c
endif

ifeq ($(CONFIG_NRF52_LPCOMP),y)
CHIP_CSRCS += nrf52_comp.c
endif

ifeq ($(CONFIG_NRF52_PDM),y)
CHIP_CSRCS += nrf52_pdm.c
endif

ifeq ($(CONFIG_NRF52_I2S),y)
CHIP_CSRCS += nrf52_i2s.c
endif

ifeq ($(CONFIG_NRF52_WDG),y)
CHIP_CSRCS += nrf52_wdg.c
endif

ifeq ($(CONFIG_NRF52_PWM),y)
CHIP_CSRCS += nrf52_pwm.c
endif

ifeq ($(CONFIG_NRF52_PROCFS_DEVID),y)
CHIP_CSRCS += nrf52_procfs_devid.c
endif

ifeq ($(CONFIG_NRF52_USBD),y)
CHIP_CSRCS += nrf52_usbdev.c
CHIP_CSRCS += nrf52_power.c
endif

CHIP_CSRCS += nrf52_uniqueid.c

#MSG="open libarch.a\\naddlib nrf52/$(NRF52_LIB)\\nsave\\nend\\n"
nuttx$(EXEEXT): $(SCRIPTSDIR)/$(LDSCRIPT)

ifeq ($(CONFIG_ARCH_CHIP_NRF52840),y)
$(SCRIPTSDIR)/$(LDSCRIPT): $(SCRIPTSDIR)/$(LINKERLD) $(TOPDIR)/.config $(SCRIPTSDIR)/memory.ld
	$(Q) $(CPP) -P -x c $(CFLAGS) $< | grep -v "^#" > $@
endif

#nrf52/$(NRF52_LIB)$(LIBEXT):
#	/bin/echo -e "$(MSG)" | arm-none-eabi-ar -M

