/**
 * Copyright (c) 2012 - 2017, Nordic Semiconductor ASA
 *
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form, except as embedded into a Nordic
 *    Semiconductor ASA integrated circuit in a product or a software update for
 *    such product, must reproduce the above copyright notice, this list of
 *    conditions and the following disclaimer in the documentation and/or other
 *    materials provided with the distribution.
 *
 * 3. Neither the name of Nordic Semiconductor ASA nor the names of its
 *    contributors may be used to endorse or promote products derived from this
 *    software without specific prior written permission.
 *
 * 4. This software, with or without modification, must only be used with a
 *    Nordic Semiconductor ASA integrated circuit.
 *
 * 5. Any software provided in binary form under this license must not be reverse
 *    engineered, decompiled, modified and/or disassembled.
 *
 * THIS SOFTWARE IS PROVIDED BY NORDIC SEMICONDUCTOR ASA "AS IS" AND ANY EXPRESS
 * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY, NONINFRINGEMENT, AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL NORDIC SEMICONDUCTOR ASA OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
 * GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
 * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */
/**@file
 *
 * @defgroup ble_sensor Sensor Service
 * @{
 * @ingroup  ble_sdk_srv
 * @brief    Sensor Service implementation.
 *
 * @details The Sensor Service is a simple GATT-based service with TX and RX characteristics.
 *          Data received from the peer is passed to the application, and the data received
 *          from the application of this service is sent to the peer as Handle Value
 *          Notifications. This module demonstrates how to implement a custom GATT-based
 *          service and characteristics using the SoftDevice. The service
 *          is used by the application to send and receive ASCII text strings to and from the
 *          peer.
 *
 * @note    The application must register this module as BLE event observer using the
 *          NRF_SDH_BLE_OBSERVER macro. Example:
 *          @code
 *              ble_sensor_t instance;
 *              NRF_SDH_BLE_OBSERVER(anything, ble_sensor_BLE_OBSERVER_PRIO,
 *                                   ble_sensor_on_ble_evt, &instance);
 *          @endcode
 */
#ifndef BLE_SENSOR_H__
#define BLE_SENSOR_H__

#include <stdint.h>
#include <stdbool.h>
#include "sdk_config.h"
#include "ble.h"
#include "ble_srv_common.h"
//#include "nrf_sdh_ble.h"

#ifdef __cplusplus
extern "C" {
#endif


#define SENSOR_BASE_UUID                      {{0xAB, 0x3A, 0x25, 0x8B, 0x28, 0xD0, 0x46, 0x80, 0x9B, 0x80, 0xF0, 0x85, 0x00, 0x00, 0x8B, 0xDD}} /**< generated by nrfgo. */
#define BLE_UUID_SENSOR_SERVICE               (0x0F00)           /**< The UUID of the ZGLUE sensors service. */
#define BLE_UUID_SENSOR_TX_CHARACTERISTIC     (0x0F11)           /**< The UUID of the NTF Characteristic. */
#define BLE_UUID_SENSOR_ENABLE_CHARACTERISTIC (0x0F10)           /**< The UUID of the Enable Characteristic. */

#define OPCODE_LENGTH 1
#define HANDLE_LENGTH 2

#define BLE_SENSOR_MAX_TX_DATA_LEN            (251)              /**< Maximum length of the TX Characteristic (in bytes), 251 = 255-MIC. */
#define BLE_SENSOR_DATA_NOTIFICATION_TICK     (100)
#define BLE_SENSOR_DATA_BYTES                 (10)
#define BLE_SENSOR_ENABLE_BYTES               (1)
#define BLE_SENSOR_ENABLE_REPORT              (1)
#define BLE_SENSOR_DISABLE_REPORT             (0)




/**@brief   Sensor Service event types. */
typedef enum
{
  BLE_SENSOR_EVT_RX_DATA,           /**< Data received. */
  BLE_SENSOR_EVT_TX_RDY,            /**< Service is ready to accept new data to be transmitted. */
  BLE_SENSOR_EVT_COMM_STARTED,      /**< Notification has been enabled. */
  BLE_SENSOR_EVT_COMM_STOPPED,      /**< Notification has been disabled. */
} ble_sensor_evt_type_t;



/* Forward declaration of the ble_sensor_t type. */
typedef struct ble_sensor_s ble_sensor_t;

/**@brief   Sensor Service @ref BLE_SENSOR_EVT_RX_DATA event data.
 *
 * @details This structure is passed to an event when @ref BLE_SENSOR_EVT_RX_DATA occurs.
 */
typedef struct
{
  uint8_t const *p_data;            /**< A pointer to the buffer with received data. */
  uint16_t        length;           /**< Length of received data. */
} ble_sensor_evt_rx_data_t;

/**@brief   Sensor Service event structure.
 *
 * @details This structure is passed to an event coming from service.
 */
typedef struct
{
  ble_sensor_evt_type_t type;           /**< Event type. */
  ble_sensor_t *p_sensor;                  /**< A pointer to the instance. */
  union
  {
    ble_sensor_evt_rx_data_t rx_data; /**< @ref BLE_SENSOR_EVT_RX_DATA event data. */
  } params;
} ble_sensor_evt_t;

/**@brief   Sensor Service event handler type. */
typedef void (*ble_sensor_data_handler_t) (ble_sensor_evt_t *p_evt);

/**@brief   Sensor Service initialization structure.
 *
 * @details This structure contains the initialization information for the service. The application
 * must fill this structure and pass it to the service using the @ref ble_sensor_init
 *          function.
 */
typedef struct
{
  ble_sensor_data_handler_t data_handler; /**< Event handler to be called for handling received data. */
} ble_sensor_init_t;

/**@brief   Sensor Service structure.
 *
 * @details This structure contains status information related to the service.
 */
struct ble_sensor_s
{
  uint8_t                  uuid_type;               /**< UUID type for Sensor Service Base UUID. */
  uint16_t                 service_handle;          /**< Handle of Sensor Service (as provided by the SoftDevice). */
  ble_gatts_char_handles_t tx_data_handle;          /**< Handles related to the TX characteristic (as provided by the SoftDevice). */
  ble_gatts_char_handles_t
  enable_handle;           /**< Handles related to the enable characteristic (as provided by the SoftDevice). */
  uint16_t
  conn_handle;             /**< Handle of the current connection (as provided by the SoftDevice). BLE_CONN_HANDLE_INVALID if not in a connection. */
  bool
  is_notification_enabled; /**< Variable to indicate if the peer has enabled notification of the RX characteristic.*/
};


/**@brief   Function for initializing the Sensor Service.
 *
 * @param[out] p_sensor      Sensor Service structure. This structure must be supplied
 *                        by the application. It is initialized by this function and will
 *                        later be used to identify this particular service instance.
 * @param[in] p_sensor_init  Information needed to initialize the service.
 *
 * @retval NRF_SUCCESS If the service was successfully initialized. Otherwise, an error code is returned.
 * @retval NRF_ERROR_NULL If either of the pointers p_sensor or p_sensor_init is NULL.
 */
uint32_t ble_sensor_init(ble_sensor_t *p_sensor);


/**@brief   Function for handling the Sensor Service's BLE events.
 *
 * @details The Sensor Service expects the application to call this function each time an
 * event is received from the SoftDevice. This function processes the event if it
 * is relevant and calls the Sensor Service event handler of the
 * application if necessary.
 *
 * @param[in] p_ble_evt     Event received from the SoftDevice.
 * @param[in] p_context     Sensor Service structure.
 */
void ble_sensor_on_ble_evt(ble_evt_t *p_ble_evt);

/**@brief   Function for initializing the Normal UART Service, it is explored to APP layer.
 *
 * @retval NRF_SUCCESS If the service was successfully initialized. Otherwise, an error code is returned.
 * @retval NRF_ERROR_NULL If either of the pointers p_sensor or p_sensor_init is NULL.
 */
uint32_t zg_ble_sensor_init(void);

#ifdef __cplusplus
}
#endif

#endif // BLE_SENSOR_H__

/** @} */
